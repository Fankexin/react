{"version":3,"sources":["Showtime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoinput","handleInput","e","keyCode","props","add","target","value","handleChange","setState","name","parseInt","bind","state","a","b","c","console","log","this","refs","focus","ref","onChange","onKeyDown","type","inp","onClick","Todoing","todo","map","item","idx","key","del","defaultProps","Todolist","addItem","data","delItem","splice","obj","o","Object","assign","keys","forEach","ReactDOM","render","document","getElementById"],"mappings":"iOACuBA,Y,6CCGFC,E,YACjB,aAAc,IAAD,8BACT,+CAQJC,YAAc,SAACC,GAEM,KAAdA,EAAEC,SACD,EAAKC,MAAMC,IAAIH,EAAEI,OAAOC,QAZnB,EAiBbC,aAAe,SAACN,GACZ,EAAKO,SAAL,eACKP,EAAEI,OAAOI,KAAMC,SAA4B,KAAnBT,EAAEI,OAAOC,MAAe,EAAIL,EAAEI,OAAOC,UAjBlE,EAAKN,YAAc,EAAKA,YAAYW,KAAjB,gBACnB,EAAKC,MAAQ,CACTC,EAAE,GACFC,EAAE,GACFC,EAAE,IANG,E,iFAwBTC,QAAQC,IAAIC,KAAKC,KAAKN,GACtBK,KAAKC,KAAKN,EAAEO,U,+BAGN,IAAD,OACL,OACI,6BACI,2BAAOC,IAAI,IAAIZ,KAAK,IAAIa,SAAUJ,KAAKX,aAAcD,MAAOY,KAAKN,MAAMC,EAAGU,UAAWL,KAAKlB,YAAawB,KAAK,SADhH,IAGI,2BAAOf,KAAK,IAAIa,SAAUJ,KAAKX,aAAcD,MAAOY,KAAKN,MAAME,EAAGS,UAAWL,KAAKlB,YAAawB,KAAK,SAHxG,IAKI,2BAAOf,KAAK,IAAIa,SAAUJ,KAAKX,aAAcD,MAAOY,KAAKN,MAAMG,EAAGQ,UAAWL,KAAKlB,YAAawB,KAAK,SALxG,IAQI,2BAAIN,KAAKN,MAAMC,EAAEK,KAAKN,MAAME,EAAEI,KAAKN,MAAMG,GAEzC,2BAAOM,IAAK,SAACI,GAAO,EAAKA,IAAMA,GAAMD,KAAK,SAC1C,4BAAQE,QAAW,WAAKV,QAAQC,IAAI,EAAKQ,IAAInB,SAA7C,qB,GA1CuBR,aCDlB6B,E,iLAKP,IAAD,OACAC,EAAQV,KAAKf,MAAbyB,KACL,OACI,6BACI,4BACIA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OAEL,wBAAIC,IAAKD,GAAMD,EAAf,MAAuB,4BAAQJ,QAAS,SAACzB,GAAD,OAAK,EAAKE,MAAM8B,IAAIF,EAAI9B,KAAzC,0B,GAZVH,aAuBrC6B,EAAQO,aAAe,CACnBN,KAAK,CAAC,GAAG,EAAE,EAAE,I,ICvBIO,E,YACjB,aAAc,IAAD,uBACT,+CAkBJC,QAAU,SAACC,GACP,EAAK7B,SAAS,CACVoB,KAAK,GAAD,mBAAK,EAAKhB,MAAMgB,MAAhB,CAAqBS,OArBpB,EAwBbC,QAAU,SAACP,EAAI9B,GAEXe,QAAQC,IAAIc,GACZf,QAAQC,IAAIhB,GACZ,IAAI2B,EAAI,YAAO,EAAKhB,MAAMgB,MAC1BA,EAAKW,OAAOR,EAAI,GAEhB,EAAKvB,UAAS,SAACI,EAAMT,GAEjB,OADAa,QAAQC,IAAIL,EAAMgB,MACZ,CACFA,KAAKA,OAhCb,EAAKhB,MAAQ,CACTgB,KAAK,CAAC,EAAE,EAAE,IAGd,IAAIY,EAAM,CAAC3B,EAAE,IAAIC,EAAE,CAAC,EAAE,EAAE,IAGpB2B,EAAIC,OAAOC,OAAOH,EAFX,CAACzB,EAAE,MAPL,OAYTC,QAAQC,IAAIuB,GACZxB,QAAQC,IAAIwB,IAAID,GAChBE,OAAOE,KAAKJ,GAAKK,SAAQ,SAACf,GACtBd,QAAQC,IAAIa,GACZd,QAAQC,IAAIuB,EAAIV,OAhBX,E,sEAgDT,OACI,6BACI,kBAAC,EAAD,CAAW1B,IAAKc,KAAKkB,UACrB,kBAAC,EAAD,CAASH,IAAKf,KAAKoB,QAASV,KAAMV,KAAKN,MAAMgB,Y,GApDvB9B,aCuBtCgD,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,W","file":"static/js/main.716624a6.chunk.js","sourcesContent":["import React,{Fragment,Component} from 'react';\r\nclass ShowTime extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            time:new Date().toLocaleString(),\r\n            a:100,\r\n            b:200\r\n        }\r\n        console.log(\"constructor\")\r\n        setInterval(() => {\r\n            this.setState({\r\n                time:new Date().toLocaleString()\r\n            })\r\n        }, 1000);\r\n    }\r\n    shouldComponentUpdate(){\r\n        if(this.state.a>10){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    componentDidUpdate(preProps,preState,data){\r\n        console.log('DidUpdate');\r\n        console.log(preState);\r\n        console.log(this.state.time);\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log(\"getSnapshot\");\r\n        return {name:this.state.name};\r\n    }\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n    }\r\n    render(){\r\n        console.log('render');\r\n        var {name,age} = this.props;\r\n        return (\r\n                <Fragment>\r\n                    {/**条件渲染 */}\r\n                    {name.length>5?<div>姓名：{name}</div>:''}\r\n                    {name.length>5&&<div>姓名：{name}</div>}\r\n\r\n                    <div>{this.state.time}</div>\r\n                    <div>姓名：{name}</div>\r\n                    <div>年龄：{age}</div>\r\n                    {/**循环渲染 */}\r\n                    <div>\r\n                        {\r\n                            age.map((item,index)=>{\r\n                                if(index%2===0){\r\n                                    return <p key={index}>{item}</p>//key标识标签的唯一\r\n                                }\r\n                                \r\n                            })\r\n                        }\r\n                    </div>\r\n                </Fragment>    \r\n            )\r\n    }\r\n}\r\n\r\n//默认导出：只能导出一次，被引入时可以重命名\r\nexport default ShowTime;\r\n\r\n//命名导出;可以导出多个，被引入时与导出的名一致\r\n// export {ShowTime};\r\n// export const num = 100;","import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值（表单验证）/写法相对麻烦\r\n//\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.state = {\r\n            a:'',\r\n            b:'',\r\n            c:''\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n            this.props.add(e.target.value);\r\n        }\r\n    }\r\n\r\n   \r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]:parseInt(e.target.value === '' ? 0 : e.target.value)\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.refs.a);\r\n        this.refs.a.focus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input ref=\"a\" name=\"a\" onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type='text'></input>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type='text'></input>                \r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type='text'></input>                \r\n                =\r\n                {/* <p>{parseInt(this.state.a===''?0:this.state.a)+parseInt(this.state.b===''?0:this.state.b)+parseInt(this.state.c===''?0:this.state.c)}</p> */}\r\n                <p>{this.state.a+this.state.b+this.state.c}</p>\r\n                {/* 非受控组件：一次性获取或处理表单元素的值 */}\r\n                <input ref={(inp)=>{this.inp = inp}} type=\"text\"/>\r\n                <button onClick = {()=>{console.log(this.inp.value)}}>提交</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n/**\r\n * 受控组件：\r\n * 1、给input标签添加value属性，赋值为state的值\r\n * 2、给input标签绑定onChange事件，在事件处理函数中setState\r\n * 3、一个事件处理函数控制多个表单元素时，给input标签加上name属性，事件处理函数中写；\r\n * setState({[e.target.name]:e.target.value})\r\n * \r\n */\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todoing extends Component {\r\n    // delItem (idx,e){\r\n    //     console.log(e);\r\n    //     this.props.del(idx);\r\n    // }\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <div>\r\n                <ul>{\r\n                    todo.map((item,idx) => \r\n                        // <li key={idx}>{item}---<button onClick={this.delItem.bind(this,idx)}>删除</button></li>\r\n                        <li key={idx}>{item}---<button onClick={(e)=>this.props.del(idx,e)}>删除</button></li>\r\n                    )\r\n                }</ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nTodoing.propTypes={\r\n    todo:PropTypes.array,\r\n    del:PropTypes.func\r\n}\r\nTodoing.defaultProps = {\r\n    todo:[12,3,4,4]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3]\r\n        }\r\n        //深拷贝\\浅拷贝\r\n        var obj = {a:100,b:[1,2,3]};\r\n        var obj1 = {c:300};\r\n        // var o = {...obj};//改变\r\n        var o = Object.assign(obj,obj1)\r\n        // var o = JSON.parse(JSON.stringify(obj));//不改变\r\n        // o.b[0]=200;\r\n        console.log(obj);\r\n        console.log(o===obj);\r\n        Object.keys(obj).forEach((item)=>{\r\n            console.log(item);\r\n            console.log(obj[item]);\r\n        })\r\n    }\r\n    addItem = (data)=>{\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (idx,e)=>{\r\n        //1.不能直接改变或处理state，通过setState改变\r\n        console.log(idx);\r\n        console.log(e);\r\n        let todo = [...this.state.todo];\r\n        todo.splice(idx,1);\r\n        //2.setState是异步执行\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return{\r\n                todo:todo\r\n            }\r\n\r\n        })\r\n        //在setState里获取state可能会出错，不是你想要的值\r\n        //可以像上面那样，把第一个参数写成函数\r\n        // this.setState({\r\n        //     todo:this.state.num+100\r\n        // },()=>{\r\n        //     console.log(this.state.todo);\r\n        // })\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React,{Fragment,Component} from 'react';\nimport ShowTime from './Showtime';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n// import App from './App';\n//函数声明组件\n// function ShowTime(props){\n//     console.log(props);\n//     return (<Fragment>\n//                 <div>{props.name}{props.age}</div>\n//                 <div>\n//                     {new Date().toLocaleString()}\n//                 </div>\n//             </Fragment>\n//         )\n// }\n\n//组件交互\n//父组件--->子组件；调用子组件时添加属性，子组件通过props拿到对应的传递的数据\n//子组件--->父组件\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n//     document.getElementById('root')\n// )\n\nReactDOM.render(<Todolist/>,document.getElementById('root'))\n\n//显示当前系统时间\n// function showTime() {\n//     var ele = <div>{new Date().toLocaleString()}</div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// }\n\n// setInterval(() => {\n//     showTime();\n// }, 1000);\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// var str = 'react';\n// var obj = {\n//     type: 'h1',\n//     props: {\n//         id: 'tit',\n//         class: 'tit',\n//         children: ['hello', 'react', {\n//             type: 'h1',\n//             type: 'h1',\n//             props: {\n//                 id: 'tit',\n//                 class: 'tit',\n//                 children: ['hello', 'react']}\n//             }]\n//     }\n// }\n// function render(obj, container) {\n//     var { type, props } = obj;\n//     //文档碎片\n//     var fragment = document.createDocumentFragment();\n\n//     var ele = document.createElement(type);\n//     for (var item in props) {\n//         if (item === 'class') {\n//             ele.className = props[item];\n//         }\n//         else if (item === 'children') {\n//             for (var i = 0; i < props.children.length; i++) {\n//                 // ele.innerHTML += props.children[i];\n//                 if (typeof props.children[i] === 'object') {\n//                     render(props.children[i], ele);\n//                 } else {\n//                     var txt = document.createTextNode(props.children[i]);\n//                     ele.appendChild(txt);\n//                 }\n\n//             }\n//         }\n//         else {\n//             ele[item] = props[item];\n//         }\n//     }\n//     fragment.appendChild(ele);\n//     container.appendChild(fragment);\n// }\n\n// render(obj, document.getElementById('root'));\n/**\n * 页面渲染过程\n * 请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\n * link引入css文件、css解析器解析css，生成css对象模型，\n * CSSOM和DOM tree结合生成一个render tree，最后浏览器绘制页面\n */\n//页面回流（重排reflow）:DOM结构变化、内容变化、大小、位置的变化、显示的变化（一定引起重绘，代价最大）\n//页面重绘（repaint）:颜色的变化（背景色、字体颜色、边框颜色）\n//1、先用变量进行dom处理，最后一次渲染\n// console.time('time');\n// var div = document.getElementById('root');\n// var str ='';\n// for(var i = 0;i<1000;i++){\n//     str+='<p>'+i+'</p>';\n// }\n// div.innerHTML=str;\n// console.timeEnd('time');\n//2、对于样式处理，声明一个css类\n// var div = document.getElementById('root');\n// div.style.width='100px';\n// div.style.height='100px';\n// div.style.background='red';\n// div.className='active';\n// //3、offsetLeft、offsetWidth等都会引起回流\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth;\n// setInterval(() => {\n//     wid+=1;\n//     div.style.width = wid+'px';\n// }, 100);\n//4、文档碎片（内存中的一个变量）\n\n// var ele = <h1 class = \"tit\">hello <p>react</p></h1>;\n// var ele = React.createElement(\n//     'h1',\n//     {id:'tit',class:'title'},\n//     'hello',\n//     React.createElement(\n//         'p',\n//         {id:'t',class:'tit'},\n//         'react')\n//     );\n// var ele = React.createElement('h1',{id:'tit',class:'title'},'hello',);\n// console.log(ele);\n// ReactDOM.render(ele, document.getElementById('root'));"],"sourceRoot":""}